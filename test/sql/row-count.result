test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
_ = box.space._session_settings:update('sql_default_engine', {{'=', 2, engine}})
---
...
-- Test cases concerning row count calculations.
--
box.execute("CREATE TABLE t1 (s1 VARCHAR(10) PRIMARY KEY);")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("CREATE TABLE t2 (s1 VARCHAR(10) PRIMARY KEY, s2 VARCHAR(10) REFERENCES t1 ON DELETE CASCADE);")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("CREATE TABLE t3 (i1 INT UNIQUE, i2 INT, i3 INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES (0, 0, 0);")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("CREATE TRIGGER x AFTER DELETE ON t1 FOR EACH ROW BEGIN UPDATE t3 SET i1 = i1 + ROW_COUNT(); END;")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t1 VALUES ('a');")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t2 VALUES ('a','a');")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t1 VALUES ('b'), ('c'), ('d');")
---
- row_count: 3
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [3]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
-- REPLACE is accounted for two operations: DELETE + INSERT.
box.execute("REPLACE INTO t2 VALUES('a', 'c');")
---
- row_count: 2
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [2]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("DELETE FROM t1;")
---
- row_count: 4
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [4]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t3 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);")
---
- row_count: 3
...
box.execute("TRUNCATE TABLE t3;")
---
- row_count: 0
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t3 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);")
---
- row_count: 3
...
box.execute("UPDATE t3 SET i2 = 666;")
---
- row_count: 3
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [3]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
-- gh-3816: DELETE optimization returns valid number of
-- deleted tuples.
--
box.execute("DELETE FROM t3 WHERE 0 = 0;")
---
- row_count: 3
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [3]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("INSERT INTO t3 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);")
---
- row_count: 3
...
box.execute("DELETE FROM t3")
---
- row_count: 3
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [3]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
-- But triggers still should't be accounted.
--
box.execute("CREATE TABLE tt1 (id INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("CREATE TABLE tt2 (id INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tr1 AFTER DELETE ON tt1 FOR EACH ROW BEGIN DELETE FROM tt2; END;")
---
- row_count: 1
...
box.execute("INSERT INTO tt1 VALUES (1), (2), (3);")
---
- row_count: 3
...
box.execute("INSERT INTO tt2 VALUES (1), (2), (3);")
---
- row_count: 3
...
box.execute("DELETE FROM tt1 WHERE id = 2;")
---
- row_count: 1
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [1]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("SELECT * FROM tt2;")
---
- rows: []
  metadata:
  - name: ID
    type: integer
...
box.execute("DROP TABLE tt1;")
---
- row_count: 1
...
box.execute("DROP TABLE tt2;")
---
- row_count: 1
...
-- All statements which are not accounted as DML should
-- return 0 (zero) as a row count.
--
box.execute("START TRANSACTION;")
---
- row_count: 0
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("COMMIT;")
---
- row_count: 0
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("COMMIT;")
---
- null
- 'Failed to execute SQL statement: cannot commit - no transaction is active'
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
-- box.execute("ANALYZE;")
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.execute("EXPLAIN QUERY PLAN INSERT INTO t1 VALUES ('b'), ('c'), ('d');")
---
- rows:
  - [0, 0, 0, 'SCAN TABLE T2 (~262144 rows)']
  metadata:
  - name: selectid
    type: integer
  - name: order
    type: integer
  - name: from
    type: integer
  - name: detail
    type: text
...
box.execute("SELECT ROW_COUNT();")
---
- rows:
  - [0]
  metadata:
  - name: ROW_COUNT()
    type: integer
...
box.space._session_settings:get('sql_recursive_triggers')
---
- ['sql_recursive_triggers', true]
...
-- Clean-up.
--
box.execute("DROP TABLE t2;")
---
- row_count: 1
...
box.execute("DROP TABLE t3;")
---
- row_count: 1
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
--
-- gh-4188: make sure that in case of INSERT OR IGNORE only
-- successful inserts are counted.
--
box.execute("CREATE TABLE t (i INT PRIMARY KEY AUTOINCREMENT, a INT check (a > 0));")
---
- row_count: 1
...
box.execute("INSERT OR IGNORE INTO t VALUES (null, 1), (null, -1), (null, 2);")
---
- row_count: 2
  autoincrement_ids:
  - 1
  - 3
...
box.execute("SELECT * FROM t;")
---
- rows:
  - [1, 1]
  - [3, 2]
  metadata:
  - name: I
    type: integer
  - name: A
    type: integer
...
box.execute("DROP TABLE t;")
---
- row_count: 1
...
--
-- gh-4363: make sure that row_count has increased in the case of
-- ALTER TABLE <table> ADD CONSTRAINT <constraint> CHECK(<expr>);
--
box.execute('CREATE TABLE t1(id INTEGER PRIMARY KEY);')
---
- row_count: 1
...
box.execute('ALTER TABLE t1 ADD CONSTRAINT ck1 CHECK(id > 0);')
---
- row_count: 1
...
box.execute('DROP TABLE t1;')
---
- row_count: 1
...
